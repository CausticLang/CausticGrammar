type <-
    # Nested type
    t:identifier _ '<' _ s:type ~ { _cap_ERROR("type", "Expected (sub)type after '<'"); }
    _ '>' ~ { _cap_ERROR("type", "Expected closing '>'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(Type, t, s));
        $$ = _cap_LASTNODE;
    }
  / # Flat type
    t:identifier { $$ = t; }

enum <-
    ENUM_KW _ n:identifier ~ { _cap_ERROR("enum", "Expected identifier after 'enum'"); }
    _ ( '<' _ b:identifier ~ { _cap_ERROR("enum", "Expected identifier after '<'"); }
        _ '>' ~ { _cap_ERROR("enum", "Expected closing '>'"); } )?
    _ '{' ~ { _cap_ERROR("enum", "Expected '{'"); }
    {
        cap_ps_push(auxil);
        auxil->stack->mark = ENUM_BODY;
        auxil->stack->data = _cap_MKINITNODE(Enum, n, b);
    }
    _ ( enum_member _ )*
    _ '}' ~ { _cap_ERROR("enum", "Expected closing '}'"); } {
        _cap_ADDNODE(cap_ps_pop(auxil));
        $$ = _cap_LASTNODE;
    }
enum_member <-
    n:identifier
    ( _ '=' _ v:expression ~ { _cap_ERROR("enum_member", "Expected expression after '='"); } )?
    _ EOL ~ { _cap_ERROR("enum_member", "Expected EOL ';' after enum member"); } {
        assert(auxil->stack->mark == ENUM_BODY);
        cst_nEnum* en = auxil->stack->data;
        en->members = realloc(en->members, (++en->n_members) * sizeof(cst_nEnum_Member));
        *(en->members[en->n_members-1]) = (cst_nEnum_Member)CST__TYPES__ENUM_MEMBER__INIT;
        en->members[en->n_members-1]->name = n;
        en->members[en->n_members-1]->val = v;
    }

struct <-
    STRUCT_KW _ s:struct_inner ~ { _cap_ERROR("struct", "Expected identifier after 'struct'"); } { $$ = s; }
struct_inner <-
    n:identifier
    _ ( '<' _ b:identifier ~ { _cap_ERROR("struct_inner", "Expected identifier after '<'"); }
        _ '>' ~ { _cap_ERROR("struct_inner", "Expected closing '>'"); } )?
    _ '{' ~ { _cap_ERROR("struct_inner", "Expected '{'"); }
    {
        cap_ps_push(auxil);
        auxil->stack->mark = STRUCT_BODY;
        auxil->stack->data = _cap_MKINITNODE(Struct, n, b);
    }
    _ ( struct_member _ )*
    _ '}' ~ { _cap_ERROR("struct_inner", "Expected closing '}'"); } {
        _cap_ADDNODE(cap_ps_pop(auxil));
        $$ = _cap_LASTNODE;
    }
struct_member <-
    t:type
    _ n:identifier ~ { _cap_ERROR("struct_member", "Expected identifier after type"); }
    ( _ '=' _ v:expression ~ { _cap_ERROR("struct_member", "Expected expression after '='"); } )?
    _ EOL ~ { _cap_ERROR("struct_member", "Expected EOL ';' after struct member"); } {
        assert(auxil->stack->mark == STRUCT_BODY);
        cst_nStruct* st = auxil->stack->data;
        st->members = realloc(st->members, (++st->n_members) * sizeof(cst_nStruct_Member));
        *(st->members[st->n_members-1]) = (cst_nStruct_Member)CST__TYPES__STRUCT_MEMBER__INIT;
        st->members[st->n_members-1]->type = t;
        st->members[st->n_members-1]->name = n;
        st->members[st->n_members-1]->val = v;
    }

structenum <-
    STRUCTENUM_KW _ n:identifier ~ { _cap_ERROR("structenum", "Expected identifier after 'tunion'"); }
    _ ( '<' _ b:identifier ~ { _cap_ERROR("structenum", "Expected identifier after '<'"); }
      _ '>' ~ { _cap_ERROR("structenum", "Expected closing '>'"); } )? {
        cap_ps_push(auxil);
        auxil->stack->mark = STRUCTENUM_BODY;
        auxil->stack->data = _cap_MKINITNODE(StructEnum, n, b);
    }
    _ '{' ~ { _cap_ERROR("structenum", "Expected '{'"); }
    _ ( structenum_member _ )*
    _ '}' ~ { _cap_ERROR("structenum", "Expected closing '}'"); } {
        _cap_ADDNODE(cap_ps_pop(auxil));
        $$ = _cap_LASTNODE;
    }

structenum_member <-
    s:struct_inner _ EOL ~ { _cap_ERROR("structenum_member", "Expected EOL ';' after tagged-union member"); } {
        assert(auxil->stack->mark == STRUCTENUM_BODY);
        cst_nStructEnum* es = auxil->stack->data;
        es->members = realloc(es->members, (++es->n_members) * sizeof(cst_index));
        es->members[es->n_members-1] = s;
    }

class <-
    CLASS_KW _ n:identifier ~ { _cap_ERROR("class", "Expected identifier after 'class'"); }
    _ ( '<' _ b:identifier ~ { _cap_ERROR("class", "Expected identifier after '<'"); }
      _ '>' ~ { _cap_ERROR("class", "Expected closing '>'"); } )? {
        cap_ps_push(auxil);
        auxil->stack->mark = CLASS_BODY;
        auxil->stack->data = _cap_MKINITNODE(Class, n, b);
    }
    _ '{' ~ { _cap_ERROR("class", "Expected '{'"); }
    _ ( class_member _ )*
    _ '}' ~ { _cap_ERROR("class", "Expected closing '}'"); } {
        _cap_ADDNODE(cap_ps_pop(auxil));
        $$ = _cap_LASTNODE;
    }

class_member <-
    STATIC_KW _ ( class_class_method / class_class_member ) ~ { _cap_ERROR("class_member", "Expected class member or procedure following 'static'"); }
  / class_instance_method / class_instance_member
  / EOL {
        if (auxil->config.track_empty_lines)
            _cap_ADDNODE(_cap_MKINITNODE(ExtraData, "blank_eol:class_member", NULL));
    }

class_instance_member <-
    t:type _ n:identifier ~ { _cap_ERROR("class_instance_member", "Expected identifier"); }
    ( _ '=' _ v:expression ~ { _cap_ERROR("class_instance_member", "Expected expression after '='"); } )?
    _ EOL ~ { _cap_ERROR("class_instance_member", "Expected EOL ';' after class member"); } {
        assert(auxil->stack->mark == CLASS_BODY);
        cst_nClass* cls = auxil->stack->data;
        cls->members = realloc(cls->members, (++cls->n_members) * sizeof(cst_nClass_Member*));
        *(cls->members[cls->n_members-1]) = (cst_nClass_Member)CST__TYPES__CLASS_MEMBER__INIT;
        cls->members[cls->n_members-1]->is_static = false;
        cls->members[cls->n_members-1]->val_case = CST__TYPES__CLASS_MEMBER__VAL_MEMBER;
        cst_nStruct_Member* sm = cls->members[cls->n_members-1]->member = malloc(sizeof(cst_nStruct_Member));
        *sm = (cst_nStruct_Member)CST__TYPES__CLASS_MEMBER__INIT;
        sm->type = t; sm->name = n; sm->val = v;
    }
class_class_member <-
    t:type _ n:identifier ~ { _cap_ERROR("class_class_member", "Expected identifier"); }
    ( _ '=' _ v:expression ~ { _cap_ERROR("class_class_member", "Expected expression after '='"); } )?
    _ EOL ~ { _cap_ERROR("class_class_member", "Expected EOL ';' after class member"); } {
        assert(auxil->stack->mark == CLASS_BODY);
        cst_nClass* cls = auxil->stack->data;
        cls->members = realloc(cls->members, (++cls->n_members) * sizeof(cst_nClass_Member*));
        *(cls->members[cls->n_members-1]) = (cst_nClass_Member)CST__TYPES__CLASS_MEMBER__INIT;
        cls->members[cls->n_members-1]->is_static = true;
        cls->members[cls->n_members-1]->val_case = CST__TYPES__CLASS_MEMBER__VAL_MEMBER;
        cst_nStruct_Member* sm = cls->members[cls->n_members-1]->member = malloc(sizeof(cst_nStruct_Member));
        *sm = (cst_nStruct_Member)CST__TYPES__CLASS_MEMBER__INIT;
        sm->type = t; sm->name = n; sm->val = v;
    }

class_instance_method <- p:proc_stmt {
    assert(auxil->stack->mark = CLASS_BODY);
    cst_nClass* cls = auxil->stack->data;
    cls->members = realloc(cls->members, (++cls->n_members) * sizeof(cst_nClass_Member));
    *(cls->members[cls->n_members-1]) = (cst_nClass_Member)CST__TYPES__CLASS_MEMBER__INIT;
    cls->members[cls->n_members-1]->is_static = false;
    cls->members[cls->n_members-1]->val_case = CST__TYPES__CLASS_MEMBER__VAL_METHOD;
    cls->members[cls->n_members-1]->method = p;
}
class_class_method <- p:proc_stmt {
    assert(auxil->stack->mark = CLASS_BODY);
    cst_nClass* cls = auxil->stack->data;
    cls->members = realloc(cls->members, (++cls->n_members) * sizeof(cst_nClass_Member));
    *(cls->members[cls->n_members-1]) = (cst_nClass_Member)CST__TYPES__CLASS_MEMBER__INIT;
    cls->members[cls->n_members-1]->is_static = true;
    cls->members[cls->n_members-1]->val_case = CST__TYPES__CLASS_MEMBER__VAL_METHOD;
    cls->members[cls->n_members-1]->method = p;
}
