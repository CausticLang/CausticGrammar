Block: EMPTY ; // OVERRIDE
expression: EMPTY ; // OVERRIDE
Identifier: EMPTY ; // OVERRIDE
DottedIdentifier: EMPTY ; // OVERRIDE


// Invokation
Invoke: proc=expression
        ARG_LEFT
        passed=args?
        ARG_RIGHT ;

@pass_single
args: (PosArg {0} | VarPosArg {1} | KWArg {1} | VarKWArg {1})+[ARG_SEP] ARG_SEP? ;

posargs: (PosArg {0} | VarPosArg {1})+[ARG_SEP] ;

PosArg: val=expression ;
VarPosArg: VARARGS val=expression ;

kwargs: (KWArg | VarKWArg)+[ARG_SEP] ;

KWArg: name=Identifier KWARG val=expression ;
VarKWArg: VARKWARGS val=expression ;

VarKWPar: VARKWARGS name=Identifier ;

// Procedure declaration
@pass_dict
Param: type=expression name=Identifier (DEFAULT default=expression)? ;

PosOnly: POS_ONLY ;
@pass_dict
VarParam: VARARGS (type=expression name=Identifier)? ;
@pass_dict
VarKWParam: VARKWARGS type=expression name=Identifier ;

@pass_last
pos_or_kw_part: ARG_SEP Param+[ARG_SEP] ;
@pass_dict
var_pos_and_kw_only: var_pos=VarParam kw_only=kw_only_part? ;
@pass_last
var_pos_and_kw_only_part: ARG_SEP var_pos_and_kw_only ;
@pass_last
kw_only_part: ARG_SEP Param+[ARG_SEP] ;
@pass_last
var_kw_part: ARG_SEP VarKWParam ;

ProcedureParams: pos_only=Param+[ARG_SEP] ARG_SEP PosOnly pos_or_kw=pos_or_kw_part? var_pos_and_kw_only=var_pos_and_kw_only_part? var_kw=var_kw_part? ARG_SEP?
               | pos_or_kw=Param+[ARG_SEP] var_pos_and_kw_only=var_pos_and_kw_only_part? var_kw=var_kw_part? ARG_SEP?
               | var_pos_and_kw_only=var_pos_and_kw_only var_kw=var_kw_part? ARG_SEP?
               | var_kw=VarKWParam ARG_SEP? ;

/// Expression
ProcedureExpr: PROCEXPR type=DottedIdentifier? ARG_LEFT params=ProcedureParams? ARG_RIGHT body=Block? ;

/// Statement
ProcedureStmt: PROC type=DottedIdentifier? name=Identifier ARG_LEFT params=ProcedureParams? ARG_RIGHT body=Block? ;


terminals

KWARG: ':' ;

VARARGS: '*' ;
VARKWARGS: '**' ;

ARG_LEFT: '(' ;
ARG_RIGHT: ')' ;
ARG_SEP: ',' ;

DEFAULT: '=' ;

PROC: 'proc' {prefer} ;

POS_ONLY: '/' ;

PROCEXPR: '$' ;
