expression: EMPTY ; // OVERRIDE
atom: EMPTY ; // OVERRIDE

operator: unary   {20, left}
        | binary  {10, left}
        | Ternary {05, left} ;

unary: unary_right {10, left}
     | unary_left  {05, left} ;

unary_right: Increment | Decrement ;
Increment: target=expression INCREMENT ;
Decrement: target=expression DECREMENT ;

unary_left: UPlus | UMinus | BitInvert | LogNot ;
UPlus: PLUS target=expression ;
UMinus: MINUS target=expression ;
BitInvert: BITINVERT target=expression ;
LogNot: LOGNOT target=expression ;

binary: AssignExpr    {05, left}
      | arithmetic    {10, left}
      | comparison    {20, left}
      | logical       {30, left}
      | bitwise       {25, left}
      | bitwise_shift {15, left} ;

AssignExpr: left=expression ASSIGNEXPR right=expression ;
// Arithmetic
arithmetic: Add  {05, left}
          | Sub  {05, left}
          | Mult {10, left}
          | Div  {10, left}
          | Mod  {10, left}
          | MMul {10, left}
          | Pow  {15, right} ;
Add:  left=expression PLUS  right=expression ;
Sub:  left=expression MINUS right=expression ;
Mult: left=expression MULT  right=expression ;
Div:  left=expression DIV   right=expression ;
Mod:  left=expression MOD   right=expression ;
MMul: left=expression MMUL  right=expression ;
Pow:  left=expression POW   right=expression ;
// Comparison
comparison: Equality              {15, left}
          | Inequality            {15, left}
          | LessThan              {10, left}
          | GreaterThan           {10, left}
          | LessThanOrEquality    {10, left}
          | GreaterThanOrEquality {10, left}
          | Nullish               {05, left} ;
Equality:              left=expression EQ right=expression ;
Inequality:            left=expression NE right=expression ;
LessThan:              left=expression LT right=expression ;
GreaterThan:           left=expression GT right=expression ;
LessThanOrEquality:    left=expression LE right=expression ;
GreaterThanOrEquality: left=expression GE right=expression ;
Nullish:               left=expression NULLISH right=expression ;
// Logical
logical: LogAnd | LogOr | LogXor ;
LogAnd: left=expression LOGAND right=expression;
LogOr:  left=expression LOGOR  right=expression;
LogXor: left=expression LOGXOR right=expression;
// Bitwise
bitwise: BitAnd | BitOr | BitXor ;
bitwise_shift: LShift | RShift ;
BitAnd: left=expression BITAND right=expression ;
BitOr:  left=expression BITOR  right=expression ;
BitXor: left=expression BITXOR right=expression ;
LShift: left=expression LSHIFT right=expression ;
RShift: left=expression RSHIFT right=expression ;

Ternary: cmp=expression TERNARY_CMP true=expression TERNARY_DELIM false=expression ;

terminals

// Multi
PLUS: '+' ;
MINUS: '-' ;

// Unary
INCREMENT: '++' ;
DECREMENT: '--' ;
BITINVERT: '~' ;
LOGNOT: '!' ;

// Binary
ASSIGNEXPR: ':=' ;
/// Arithmetic
MULT: '*' ;
DIV: '/' ;
MOD: '%' ;
MMUL: '@' ;
POW: '**' ;
/// Comparison
EQ: '==' ;
NE: '!=' ;
LT: '<' ;
GT: '>' ;
LE: '<=' ;
GE: '>=' ;
NULLISH: '??' ;
/// Logical
LOGAND: '&&' ;
LOGOR: '||' ;
LOGXOR: '^^' ;
/// Bitwise
BITAND: '&' ;
BITOR: '|' ;
BITXOR: '^' ;
LSHIFT: '<<' ;
RSHIFT: '>>' ;

// Ternary
TERNARY_CMP: '?' ;
TERNARY_DELIM: ':' ;
