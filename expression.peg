expression <- n:proc_expr_ { $$ = n; }

proc_expr_ <- n:proc_expr { $$ = n; }
            / n:ternary { $$ = n; }

ternary <-
    c:disjunction _ '?' _
    t:disjunction ~ { _cap_ERROR("ternary", "Expected expression after '\?'"); } _
    ':' ~ { _cap_ERROR("ternary", "':' expected"); } _
    f:ternary ~ { _cap_ERROR("ternary", "Expected expression after ':'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(TernaryOp, CST__OPERATORS__TERNARY_OP_TYPE__CONDITIONAL, c, t, f));
        $$ = _cap_LASTNODE;
    }
  / n:disjunction { $$ = n; }

disjunction <-
    l:disjunction _ '||' _ r:xdisjunction ~ { _cap_ERROR("disjunction", "Expected expression after '||'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__LOGOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:disjunction _ '??' _ r:xdisjunction ~ { _cap_ERROR("disjunction", "Expected expression after '\?\?'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__NULLCOALESCING, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:xdisjunction { $$ = n; }
xdisjunction <-
    l:xdisjunction _ '^^' _ r:conjunction ~ { _cap_ERROR("xdisjunction", "Expected expression after '^^'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__LOGXOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:conjunction { $$ = n; }
conjunction <-
    l:conjunction _ '&&' _ r:bitxor ~ { _cap_ERROR("conjunction", "Expected expression after '&&'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__LOGAND, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:bitxor { $$ = n; }

bitxor <-
    l:bitxor _ '^' !'^' _ r:bitor ~ { _cap_ERROR("bitxor", "Expected expression after '^'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__BITXOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:bitor { $$ = n; }
bitor <-
    l:bitor _ '|' !'|' _ r:bitand ~ { _cap_ERROR("bitor", "Expected expression after '|'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__BITOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:bitand { $$ = n; }
bitand <-
    l:bitand _ '&' !'&' _ r:comparison ~ { _cap_ERROR("bitand", "Expected expression after '&'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__BITAND, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:comparison { $$ = n; }

comparison <-
    l:comparison _ '===' _ r:inequality ~ { _cap_ERROR("comparison", "Expected expression after '==='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__IS, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:comparison _ '!==' _ r:inequality ~ { _cap_ERROR("comparison", "Expected expression after '!=='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__ISNT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:comparison _ '==' _ r:inequality ~ { _cap_ERROR("comparison", "Expected expression after '=='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__EQ, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:comparison _ '!=' _ r:inequality ~ { _cap_ERROR("comparison", "Expected expression after '!='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__NE, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:inequality { $$ = n; }
inequality <-
    l:inequality _ '<=' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '<='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__LE, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:inequality _ '>=' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '>='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__GE, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:inequality _ '<' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '<'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__LT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:inequality _ '>' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '>'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__GT, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:shift { $$ = n; }

shift <-
    l:shift _ '<<' _ r:sum ~ { _cap_ERROR("shift", "Expected expression after '<<'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__LSHIFT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:shift _ '>>' _ r:sum ~ { _cap_ERROR("shift", "Expected expression after '>>'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__RSHIFT, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:sum { $$ = n; }

sum <-
    l:sum _ '+' _ r:factor ~ { _cap_ERROR("sum", "Expected expression after '+'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__ADD, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:sum _ '-' _ r:factor ~ { _cap_ERROR("sum", "Expected expression after '-'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__SUB, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:factor { $$ = n; }

factor <-
    l:factor _ '*' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '*'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__MULT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:factor _ '@' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '@'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__MMUL, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:factor _ '/' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '/'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__DIV, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:factor _ '%' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '%'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__MOD, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:exp { $$ = n; }

exp <-
    l:prefix _ '**' _ r:postfix ~ { _cap_ERROR("exp", "Expected expression after '**'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, CST__OPERATORS__BINARY_OP_TYPE__POW, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:prefix { $$ = n; }

prefix <-
    '+' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '+'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, CST__OPERATORS__UNARY_OP_TYPE__POS, t));
        $$ = _cap_LASTNODE;
    }
  / '-' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '-'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, CST__OPERATORS__UNARY_OP_TYPE__NEG, t));
        $$ = _cap_LASTNODE;
    }
  / '!' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '!'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, CST__OPERATORS__UNARY_OP_TYPE__LOGINV, t));
        $$ = _cap_LASTNODE;
    }
  / '~' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '~'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, CST__OPERATORS__UNARY_OP_TYPE__BITINV, t));
        $$ = _cap_LASTNODE;
    }
  / n:postfix { $$ = n; }
postfix <-
    t:postfix '++' {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, CST__OPERATORS__UNARY_OP_TYPE__INC, t));
        $$ = _cap_LASTNODE;
    }
  / t:postfix '--' {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, CST__OPERATORS__UNARY_OP_TYPE__DEC, t));
        $$ = _cap_LASTNODE;
    }
  / n:invokation { $$ = n; }

invokation <- n:invoke { $$ = n; }
            / n:access { $$ = n; }

access <- n:attr_access { $$ = n; }
        / n:subscript_access { $$ = n; }
        / n:binding { $$ = n; }

binding <-
    '(' t:expression ')' ~ { _cap_ERROR("binding", "Expected closing ')'"); } { $$ = t; }
  / n:atom { $$ = n; }
